@inject StockManagementSystem.Services.Common.IGenericAttributeService genericAttributeService
@inject IWorkContext workContext
@{
    await Html.AppendScriptParts("~/lib/chartjs/Chart.min.js");

    const string prefix = "transaction-activity";
    const string hidePanelAttributeName = "HideTransActivityPanel";
    var hidePanel = await genericAttributeService.GetAttributeAsync<bool>(workContext.CurrentUser, hidePanelAttributeName);
}

<div class="box box-default @if (hidePanel) { <text>collapsed-box</text> }" id="@(prefix)-box">
    <div class="box-header with-border">
        <h3 class="box-title">
            <i class="glyphicon glyphicon-console"></i> Transaction Activity
        </h3>
        <div class="box-tools pull-right">
            <button class="btn btn-xs btn-info btn-flat margin-r-5" @if (hidePanel) { <text> disabled="disabled" </text> } data-chart-role="toggle-chart" data-chart-period="year">Year</button>
            <button class="btn btn-xs btn-info btn-flat margin-r-5" @if (hidePanel) { <text> disabled="disabled" </text>  } data-chart-role="toggle-chart" data-chart-period="month">Month</button>
            <button class="btn btn-xs btn-info btn-flat" @if (hidePanel) { <text> disabled="disabled" </text>  } data-chart-role="toggle-chart" data-chart-period="week">Week</button>
            <button class="btn btn-box-tool margin-l-10" data-widget="collapse">
                @if (hidePanel)
                {
                    <text><i class="fa fa-plus"></i></text>
                }
                else
                {
                    <text><i class="fa fa-minus"></i></text>
                }
            </button>
        </div>
    </div>
    <div class="box-body">
        <div class="chart" style="height: 300px;">
            <canvas id="@(prefix)-chart" height="300"></canvas>
        </div>
    </div>
</div>

<script>
    $(document).ready(function ()
    {
        var currentPeriod;

        $('#@(prefix)-box').on('click', 'button[data-widget="collapse"]', function ()
        {
            var collapsed = !$('#@(prefix)-box').hasClass('collapsed-box');
            saveUserPreferences('@(Url.Action("SavePreference", "Preferences"))', '@hidePanelAttributeName', collapsed);

            if (!collapsed)
            {
                $('#@(prefix)-box button[data-chart-role="toggle-chart"]').removeAttr('disabled');
                if (!currentPeriod) {
                    $('#@(prefix)-box button[data-chart-role="toggle-chart"][data-chart-period="week"]').trigger('click');
                }
            }
            else
            {
                $('#@(prefix)-box button[data-chart-role="toggle-chart"]').attr('disabled', 'disabled');
            }
        });

        var config = {
            type: 'line',
            data: {
                labels: [],
                datasets: [
                    {
                        label: "Transaction Activity",
                        fillColor: "rgba(60,141,188,0.9)",
                        strokeColor: "rgba(60,141,188,0.8)",
                        pointColor: "#00a65a",
                        pointStrokeColor: "rgba(0,166,90,1)",
                        pointHighlightFill: "#fff",
                        pointHighlightStroke: "rgba(0,166,90,1)",
                        borderColor: 'rgba(0,166,90, 1)',
                        backgroundColor: 'rgba(0,166,90,0.5)',
                        pointBorderColor: 'rgba(0,166,90,0.7)',
                        pointBackgroundColor: 'rgba(0,166,90,0.2)',
                        pointBorderWidth: 1,
                        data: []
                    }
                ]
            },
            options: {
                legend: { display: false },
                scales: {
                    xAxes: [
                        {
                            display: true,
                            ticks: {
                                userCallback: function(dataLabel, index) {
                                    if (window.taRpt && window.taRpt.config.data.labels.length > 12) {
                                        return index % 5 === 0 ? dataLabel : '';
                                    }
                                    return dataLabel;
                                }
                            }
                        }
                    ],
                    yAxes: [
                        {
                            display: true,
                            ticks: {
                                userCallback: function(dataLabel, index) {
                                    return (dataLabel ^ 0) === dataLabel ? dataLabel : '';
                                },
                                min: 0
                            }
                        }
                    ]
                },
                showScale: true,
                scaleShowGridLines: false,
                scaleGridLineColor: "rgba(0,0,0,.05)",
                scaleGridLineWidth: 1,
                scaleShowHorizontalLines: true,
                scaleShowVerticalLines: true,
                bezierCurve: true,
                pointDot: false,
                pointDotRadius: 4,
                pointDotStrokeWidth: 1,
                pointHitDetectionRadius: 20,
                datasetStroke: true,
                datasetFill: true,
                maintainAspectRatio: false,
                responsive: true
            }
        };

        function changePeriod(period) {
            var labels = [];
            var datas = [];

            $.ajax({
                cache: false,
                type: "GET",
                url: '@Url.Action("LoadUserTransActivity", "User")',
                data: {
                    period: period
                },
                success: function(data) {
                    for (var i = 0; i < data.length; i++) {
                        labels.push(data[i].date);
                        datas.push(data[i].value);
                    }

                    if (!window.taRpt) {
                        config.data.labels = labels;
                        config.data.datasets[0].data = datas;
                        config.data.scales = window.taRpt =
                            new Chart(document.getElementById("@prefix-chart").getContext("2d"), config);
                    } else {
                        window.taRpt.config.data.labels = labels;
                        window.taRpt.config.data.datasets[0].data = datas;
                        window.taRpt.update();
                    }
                },
                error: function(xhr, ajaxOptions, thrownError) {
                    $("#loadCustomerStatisticsAlert").click();
                }
            });
        }

        $('#@(prefix)-box button[data-chart-role="toggle-chart"]').on('click', function ()
        {
            var period = $(this).attr('data-chart-period');
            currentPeriod = period;
            changePeriod(period);
            $('#@(prefix)-box button[data-chart-role="toggle-chart"]').removeClass('bg-maroon-gradient');
            $(this).addClass('bg-maroon-gradient');
        });

        @if (!hidePanel)
        {
            <text>
                $('#@(prefix)-box button[data-chart-role="toggle-chart"][data-chart-period="week"]').trigger('click');
            </text>
        }
    });
</script>