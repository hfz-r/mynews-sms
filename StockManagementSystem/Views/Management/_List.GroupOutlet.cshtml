@model GroupOutletSearchModel

<section class="content">
    <div class="form-horizontal">
        <div class="panel-group">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div id="gridOutlet"></div>
                    <style>
                        .custom-button {
                            color: #444444;
                            padding-right: 10px;
                            font-size: 1.5em;
                        }
                    </style>
                    <script>
                            var datasource = @Html.Raw(Json.Serialize(Model.AvailableStores));

                            $(document).ready(function () {
                                var grid = $("#gridOutlet").kendoGrid({
                                dataSource: {
                                    type: "json",
                                    transport: {
                                        read: {
                                            url: "@Html.Raw(Url.Action("GroupOutletList", "Management"))",
                                            type: "POST",
                                            dataType: "json",
                                            data: function() {
                                                var data = {
                                                    SelectedStoreIds: $('#@Html.IdFor(model => model.SelectedStoreIds)').val()
                                                };
                                                addAntiForgeryToken(data);
                                                return data;
                                            }
                                        },
                                        create: {
                                            url: "@Html.Raw(Url.Action("AddGroupOutlet", "Management"))",
                                            type: "POST",
                                            dataType: "json",
                                            data: addAntiForgeryToken
                                        }
                                    },
                                    schema: {
                                        data: "Data",
                                        total: "Total",
                                        errors: "Errors",
                                        model: {
                                            id: "Id",
                                            fields: {
                                                Id: { editable: false, type: "number" },
                                                GroupName: { type: "string" },
                                                StoreName: { type: "string" },
                                                SelectedStoreIds: { editable: true, validation: { required: true } }
                                            }
                                        }
                                    },
                                    requestEnd: function (e) {
                                        if (e.type == "create") {
                                            this.read();
                                        }
                                    },
                                    error: function(e) {
                                        display_kendoui_grid_error(e);
                                        // Cancel the changes
                                        this.cancelChanges();
                                    },
                                    pageSize: @(Model.PageSize),
                                    serverPaging: true,
                                    serverFiltering: true,
                                    serverSorting: true
                                },
                                sortable: {
                                    mode: "single",
                                    allowUnsort: false
                                },
                                filterable: true,
                                resizable: true,
                                columnMenu: { columns: false },
                                pageable: {
                                    refresh: true,
                                    pageSizes: [@(Model.AvailablePageSizes)],
                                    @await Html.PartialAsync("_GridPagerMessages")
                                },
                                toolbar: [
                                    {
                                        name: "create",
                                        url: "@Html.Raw(Url.Action("AddGroupOutlet", "Management"))",
                                        text: "Add",
                                        iconClass: "glyphicon btn-glyphicon glyphicon-plus img-circle text-danger"
                                    }
                                ],
                                scrollable: false,
                                columns: [
                                    {
                                        field: "GroupName",
                                        title: "Group Name",
                                        width: 230
                                    },
                                    {
                                        field: "SelectedStoreIds",
                                        title: "Stores",
                                        template: "#=StoreName#",
                                        type: "string",
                                        width: 300,
                                        editor: function (container, option) { // use a dropdownlist as an editor
                                            // create an input element with id and name set as the bound field (brandId)
                                            var input = $('<input data-text-field="Text" multiple="multiple" data-value-field="Value" data-bind="value:' + option.field + '"/>')
                                            // append to the editor container
                                            input.appendTo(container);

                                            // initialize a dropdownlist multiselect
                                            input.kendoMultiSelect({
                                                dataTextField: "Text",
                                                dataValueField: "Value",
                                                dataSource: datasource,
                                                optionLabel: " ",
                                                autoBind: "true",
                                                valuePrimitive: "true"
                                            }).appendTo(container)
                                        }
                                    },
                                    {
                                        template:
                                            "<a href='Management/EditGroupOutlet/#=Id#' title='Edit' class='custom-button edit-button'><i class='glyphicon glyphicon-pencil'></i></a>" +
                                            "<a href='\\#' title='Update' class='custom-button update-button hidden'><i class='glyphicon glyphicon-ok-circle'></i></a>" +
                                            "<a href='\\#' title='Cancel' class='custom-button cancel-button hidden'><i class='glyphicon glyphicon-remove-circle'></i></a>" +
                                            "<a href='Management/DeleteGroupOutlet/#=Id#' action='DeleteGroupOutlet' title='Delete' class='custom-button destroy-button'><i class='glyphicon glyphicon-trash'></i></a>",
                                        headerAttributes: { style: "text-align:center" },
                                        attributes: { style: "text-align:center" },
                                        width: 111
                                    }
                                ],
                                editable: "inline",
                                edit: function (e) {
                                    // Change buttons visibility when the Grid enters edit mode.
                                    var editRow = e.container;
                                    editRow.find(".custom-button").toggleClass("hidden");
                                }
                                }).data("kendoGrid");

                                $("#gridOutlet").on("click", ".custom-button", function (e) {
                                var btn = $(this);
                                if (btn.hasClass("cancel-button")) {
                                    grid.cancelRow();
                                } else if (btn.hasClass("update-button")) {
                                    grid.saveChanges();
                                }
                            });
                        });
                    </script>
                </div>
            </div>
        </div>
    </div>
</section>
