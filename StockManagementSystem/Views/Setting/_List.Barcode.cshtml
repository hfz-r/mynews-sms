@model BarcodeSearchModel

<section class="content">
    <div class="form-horizontal">
        <div class="panel-group">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div id="barcode-grid"></div>

                    <style>
                        .custom-button {
                            color: #444444;
                            padding-right: 10px;
                            font-size: 1.5em;
                        }
                    </style>

                    <script>
                        $(document).ready(function () {
                            var grid = $("#barcode-grid").kendoGrid({
                                dataSource: {
                                    type: "json",
                                    transport: {
                                        read: {
                                            url: "@Html.Raw(Url.Action("ListBarcode", "Setting"))",
                                            type: "POST",
                                            dataType: "json",
                                            data: addAntiForgeryToken
                                        },
                                        create: {
                                            url: "@Html.Raw(Url.Action("AddBarcode", "Setting"))",
                                            type: "POST",
                                            dataType: "json",
                                            data: addAntiForgeryToken
                                        },
                                        update: {
                                            url: "@Html.Raw(Url.Action("UpdateBarcode", "Setting"))",
                                            type: "POST",
                                            dataType: "json",
                                            data: addAntiForgeryToken
                                        },
                                        destroy: {
                                            url: "@Html.Raw(Url.Action("DeleteBarcode", "Setting"))",
                                            type: "POST",
                                            dataType: "json",
                                            data: addAntiForgeryToken
                                        }
                                    },
                                    schema: {
                                        data: "Data",
                                        total: "Total",
                                        errors: "Errors",
                                        model: {
                                            id: "Id",
                                            fields: {
                                                Id: { editable: false, type: "number" },
                                                Name: { editable: true, type: "string", validation: { required: true } }
                                            }
                                        }
                                    },
                                    requestEnd: function (e) {
                                        if (e.type == "create" || e.type == "update") {
                                            this.read();
                                        }
                                    },
                                    error: function (e) {
                                        display_kendoui_grid_error(e);
                                        // Cancel the changes
                                        this.cancelChanges();
                                    },
                                    pageSize: @(Model.PageSize),
                                    serverPaging: true,
                                    serverFiltering: true,
                                    serverSorting: true
                                },
                                sortable: {
                                    mode: "single",
                                    allowUnsort: true
                                },
                                filterable: true,
                                resizable: true,
                                columnMenu: { columns: false },
                                pageable: {
                                    refresh: true
                                },
                                toolbar: [
                                    {
                                        name: "create",
                                        text: "Add",
                                        iconClass: "glyphicon btn-glyphicon glyphicon-plus img-circle text-danger"
                                    }
                                ],
                                scrollable: false,
                                columns: [
                                    {
                                        field: "Name",
                                        title: "Name",
                                        width: 500,
                                        editor: customEditor,
                                    },
                                    {
                                        template:
                                            "<a href='\\#' title='Edit' class='custom-button edit-button'><i class='glyphicon glyphicon-pencil'></i></a>" +
                                            "<a href='\\#' title='Update' class='custom-button update-button hidden'><i class='glyphicon glyphicon-ok-circle'></i></a>" +
                                            "<a href='\\#' title='Cancel' class='custom-button cancel-button hidden'><i class='glyphicon glyphicon-remove-circle'></i></a>" +
                                            "<a href='\\#' title='Delete' class='custom-button destroy-button'><i class='glyphicon glyphicon-trash'></i></a>",
                                        headerAttributes: { style: "text-align:center" },
                                        attributes: { style: "text-align:center" },
                                        width: 10
                                    }
                                ],
                                editable: {
                                    mode: "inline",
                                    createAt: "bottom",
                                    confirmation: function (model) {
                                        return 'Are you sure that you want to delete this record?'
                                    }
                                },
                                edit: function (e) {
                                    // Change buttons visibility when the Grid enters edit mode.
                                    var editRow = e.container;
                                    editRow.find(".custom-button").toggleClass("hidden");
                                }
                            }).data("kendoGrid");

                            $("#barcode-grid").on("click", ".custom-button", function (e) {
                                var btn = $(this);

                                if (btn.hasClass("edit-button")) {
                                    var row = btn.closest("tr");
                                    grid.editRow(row);
                                } else if (btn.hasClass("cancel-button")) {
                                    grid.cancelRow();
                                } else if (btn.hasClass("update-button")) {
                                    grid.saveChanges();
                                } else if (btn.hasClass("destroy-button")) {
                                    var row = btn.closest("tr");
                                    grid.removeRow(row);
                                }
                            });

                            grid.table.kendoSortable({
                                filter: ">tbody >tr:not('.k-grid-edit-row')",
                                hint: function (element) {
                                    return $("<span>Drag here!</span>")
                                        .css("color", "#FF0000");
                                },
                                cursor: "move",
                                placeholder: function (element) {
                                    return element.clone().addClass("k-state-hover").css("opacity", 0.65);
                                },
                                container: "#barcode-grid tbody",

                                change: function (e) {
                                    var skip = grid.dataSource.skip(),
                                        oldIndex = e.oldIndex + skip,
                                        newIndex = e.newIndex + skip,
                                        data = grid.dataSource.data(),
                                        dataItem = grid.dataSource.getByUid(e.item.data("uid"));

                                    grid.dataSource.pushDestroy(dataItem);
                                    grid.dataSource.insert(newIndex, dataItem);
                                    var data = JSON.stringify(grid.dataSource.data());

                                    $.ajax({
                                        type: "GET",
                                        url: '@Url.Action("SortBarcode", "Setting")',// the method we are calling
                                        contentType: 'application/json; charset=utf-8',
                                        data: { data: data },
                                        dataType: "text",
                                        success: function (result) { },
                                        error: function (xhr, status, error) {
                                            //Ajax request failed.
                                            var errorMessage = xhr.status + ': ' + xhr.statusText
                                            //alert('Error - ' + errorMessage)
                                        }
                                    });
                                }
                                });
                        });

                        function customEditor(container, options) {
                            $('<input required name="' + options.field + '" onkeypress="return isValidChar(event)"/>')
                                .appendTo(container);
                        }

                        function isValidChar(e) {
                            var regex = new RegExp("^[a-zA-Z ]+$");
                            var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
                            if (!regex.test(key)) {
                                event.preventDefault();
                                return false;
                            }
                        }

                    </script>
                </div>
            </div>
        </div>
    </div>
</section>


