@model UserSearchModel
@using System.Globalization
@inject MediaSettings _mediaSettings

@{
    //page title
    ViewBag.Title = "User Management";
    //active menu item (system name)
    Html.SetActiveMenuItemSystemName("User");
}
<form asp-controller="User" asp-action="Index" method="post">
    <section class="content-header clearfix">
        <h1 class="pull-left">@ViewBag.Title</h1>
        <ol class="breadcrumb pull-right">
            <li class="#">
                <a href="@Url.Action("Index", "Home")">
                    <i class="glyphicon glyphicon-home"></i>
                </a>
            </li>
            <li class="#">
                <a href="#">
                    <i class="fa fa-cogs"></i>
                </a>
            </li>
            <li class="breadcrumb-item active">
                <a asp-action="Index">@ViewBag.Title</a>
            </li>
        </ol>
    </section>

    <section class="content">
        <div class="form-horizontal">
            <div class="panel-group">
                <div class="panel panel-default panel-search">
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-5">                                
                                @if (Model.UsernamesEnabled)
                                {
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <_label asp-for="SearchUsername" />
                                        </div>
                                        <div class="col-md-8">
                                            <_editor asp-for="SearchUsername" />
                                        </div>
                                    </div>
                                }
                                <div class="form-group">
                                    <div class="col-md-4">
                                        <_label asp-for="SearchFirstName" />
                                    </div>
                                    <div class="col-md-8">
                                        <_editor asp-for="SearchFirstName" />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-4">
                                        <_label asp-for="SearchLastName" />
                                    </div>
                                    <div class="col-md-8">
                                        <_editor asp-for="SearchLastName" />
                                    </div>
                                </div>
                                @if (Model.DateOfBirthEnabled)
                                {
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <_label asp-for="SearchDayOfBirth" />
                                        </div>
                                        <div class="col-md-8">
                                            @{
                                                var monthOfBirthValues = new List<SelectListItem>();
                                                monthOfBirthValues.Add(new SelectListItem { Text = "Month", Value = "0" });
                                                for (var i = 1; i <= 12; i++)
                                                {
                                                    monthOfBirthValues.Add(new SelectListItem { Text = i.ToString(CultureInfo.InvariantCulture), Value = i.ToString(CultureInfo.InvariantCulture) });
                                                }
                                                var dayOfBirthValues = new List<SelectListItem>();
                                                dayOfBirthValues.Add(new SelectListItem { Text = "Day", Value = "0" });
                                                for (var i = 1; i <= 31; i++)
                                                {
                                                    dayOfBirthValues.Add(new SelectListItem { Text = i.ToString(CultureInfo.InvariantCulture), Value = i.ToString(CultureInfo.InvariantCulture) });
                                                }
                                            }
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <_select asp-for="SearchMonthOfBirth" asp-items="@monthOfBirthValues" />
                                                </div>
                                                <div class="col-md-6">
                                                    <_select asp-for="SearchDayOfBirth" asp-items="@dayOfBirthValues" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                            <div class="col-md-6">
                                @*@if (Model.PhoneEnabled)
                                {
                                    <div class="form-group">
                                        <div class="col-md-4">
                                            <_label asp-for="SearchPhone" />
                                        </div>
                                        <div class="col-md-8">
                                            <_editor asp-for="SearchPhone" />
                                        </div>
                                    </div>
                                }*@
                                <div class="form-group">
                                    <div class="col-md-4">
                                        <_label asp-for="SearchEmail" />
                                    </div>
                                    <div class="col-md-8">
                                        <_editor asp-for="SearchEmail" />
                                    </div>
                                </div>
                                @*<div class="form-group">
                                    <div class="col-md-4">
                                        <_label asp-for="SearchIpAddress" />
                                    </div>
                                    <div class="col-md-8">
                                        <_editor asp-for="SearchIpAddress" />
                                    </div>
                                </div>*@
                                <div class="form-group">
                                    <div class="col-md-4">
                                        <_label asp-for="SelectedRoleIds" />
                                    </div>
                                    <div class="col-md-8">
                                        <_select asp-for="SelectedRoleIds" asp-items="Model.AvailableRoles" asp-multiple="true" />
                                        <script>
                            $(document).ready(function() {
                                var rolesIdsInput = $('#@Html.IdFor(model => model.SelectedRoleIds)')
                                    .data("kendoMultiSelect");
                                rolesIdsInput.setOptions({
                                    autoClose: false,
                                    filter: "contains"
                                });

                                @if (Model.AvailableRoles.Count == 0)
                                {
                                    <text>
                                        rolesIdsInput.setOptions({
                                            enable: false,
                                            placeholder: "No roles available"
                                        });
                                        rolesIdsInput._placeholder();
                                        rolesIdsInput._enable();
                                    </text>
                                }
                            });
                                        </script>
                                    </div>
                                </div>

                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-7 col-md-offset-5">
                                <button type="button" id="search-users" class="btn btn-primary btn-search">
                                    <i class="fa fa-search"></i> Search
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-body">
                        <div id="users-grid"></div>
                        <style>
                            .custom-button {
                                color: #444444;
                                padding-right: 10px;
                                font-size: 1.5em;
                            }
                        </style>
                        <script>
            $(document).ready(function() {
                $("#users-grid").kendoGrid({
                    dataSource: {
                        type: "json",
                        transport: {
                            read: {
                                url: "@Html.Raw(Url.Action("UserList", "User"))",
                                type: "POST",
                                dataType: "json",
                                data: function() {
                                    var data = {
                                        SelectedRoleIds: $('#@Html.IdFor(model => model.SelectedRoleIds)').val(),
                                        SearchEmail: $('#@Html.IdFor(model => model.SearchEmail)').val(),
                                        SearchUsername: $('#@Html.IdFor(model => model.SearchUsername)').val(),
                                        SearchFirstName: $('#@Html.IdFor(model => model.SearchFirstName)').val(),
                                        SearchLastName: $('#@Html.IdFor(model => model.SearchLastName)').val(),
                                        @*SearchDayOfBirth: $('#@Html.IdFor(model => model.SearchDayOfBirth)').val(),
                                        SearchMonthOfBirth: $('#@Html.IdFor(model => model.SearchMonthOfBirth)').val(),
                                        SearchPhone: $('#@Html.IdFor(model => model.SearchPhone)').val(),*@
                                        //SearchIpAddress: $('#@Html.IdFor(model => model.SearchIpAddress)').val()
                                    };
                                    addAntiForgeryToken(data);
                                    return data;
                                }
                            },
                            destroy: {
                                url: "@Html.Raw(Url.Action("DeleteInline", "User"))",
                                type: "POST",
                                dataType: "json",
                                data: addAntiForgeryToken
                            }
                        },
                        schema: {
                            data: "Data",
                            total: "Total",
                            errors: "Errors",
                            model: { id: "Id" }
                        },
                        error: function(e) {
                            display_kendoui_grid_error(e);
                            this.cancelChanges();
                        },
                        pageSize: @(Model.PageSize),
                        serverPaging: true,
                        serverFiltering: true,
                        serverSorting: true
                    },
                    sortable: {
                        mode: "single",
                        allowUnsort: false
                    },
                    filterable: true,
                    resizable: true,
                    columnMenu: { columns: false },
                    pageable: {
                        refresh: true,
                        pageSizes: [@(Model.AvailablePageSizes)],
                        @await Html.PartialAsync("_GridPagerMessages")
                    },
                    scrollable: false,
                    columns: [
                        {
                            field: "Email",
                            title: "Email",
                            width: 150
                        },
                        @if (Model.AvatarEnabled)
                        {
                            <text>{
                            field: "AvatarUrl",
                            title: "Avatar",
                            width: @(_mediaSettings.AvatarPictureSize),
                            template:
                                "# if(AvatarUrl) {# <img src='#=AvatarUrl#' class='avatar-img' alt='Avatar'/> #} #"
                        },</text>
                        }
                        @if (Model.UsernamesEnabled)
                        {
                            <text>{
                            field: "Username",
                            title: "Username",
                            width: 150
                        },</text>
                        }
                        {
                            field: "FullName",
                            title: "Name",
                            width: 200
                        },
                        {
                            field: "UserRolesName",
                            title: "Roles",
                            width: 200
                        },
                        @if (Model.PhoneEnabled)
                        {
                            <text>{
                            field: "Phone",
                            title: "Phone",
                            width: 150,
                            sortable: false,
                            filterable: false
                        },</text>
                        }
                        {
                            field: "Active",
                            title: "Active",
                            sortable: false,
                            filterable: false,
                            headerAttributes: { style: "text-align:center" },
                            attributes: { style: "text-align:center" },
                            template:
                                '# if(Active) {# <i class="fa fa-check true-icon"></i> #} else {# <i class="fa fa-close false-icon"></i> #} #'
                        },
                        {
                            field: "CreatedOn",
                            title: "Created on",
                            type: "date",
                            template:
                                "#= CreatedOn ? kendo.toString(kendo.parseDate(CreatedOn, 'yyyy-MM-dd'),'MM/dd/yyyy h:mm tt') : ' ' #"
                        },
                        //{
                        //    field: "LastActivityDate",
                        //    title: "Last activity",
                        //    type: "date",
                        //    template: "#= LastActivityDate ? kendo.toString(kendo.parseDate(LastActivityDate, 'yyyy-MM-dd'),'MM/dd/yyyy h:mm tt') : ' ' #"
                        //},
                        {
                            template:
                                "<a href='\\#' title='Edit' onclick='edit(#=Id#)' class='custom-button edit-button'><i class='glyphicon glyphicon-pencil'></i></a>" +
                                    "<a href='\\#' title='Destroy' class='custom-button destroy-button'><i class='glyphicon glyphicon-trash'></i></a>",
                            headerAttributes: { style: "text-align:center" },
                            attributes: { style: "text-align:center" },
                            width: 100
                        }
                    ],
                    editable: {
                        confirmation: "Are you sure you want to delete this item?",
                        mode: "inline"
                    }
                });
            });
                        </script>
                        <script>

            $(document).ready(function() {
                //Removing Column Menu
                var grid = $("#users-grid").data("kendoGrid");
                grid.thead.find("[data-field=Active]>.k-header-column-menu").remove();

                @if (Model.PhoneEnabled)
                {
                    <text>
                        grid.thead.find("[data-field=Phone]>.k-header-column-menu").remove();
                    </text>
                }
                @if (Model.AvatarEnabled)
                {
                    <text>
                        grid.thead.find("[data-field=AvatarUrl]>.k-header-column-menu").remove();
                    </text>
                }
                //search button
                $('#search-users').click(function() {
                    var grid = $('#users-grid').data('kendoGrid');
                    grid.dataSource.page(1);
                    return false;
                });

                $("#users-grid").on("click",
                    ".custom-button",
                    function(e) {
                        var btn = $(this);
                        e.preventDefault();

                        if (btn.hasClass("destroy-button")) {
                            var row = btn.closest("tr");
                            grid.removeRow(row);
                        }
                    });
            });

            function edit(id) {
                var url = '@Url.Action("Edit", "User", new {id = "__id__"})';
                window.location.href = url.replace('__id__', id);
            }

                        </script>
                    </div>
                </div>
            </div>
        </div>
    </section>
</form>