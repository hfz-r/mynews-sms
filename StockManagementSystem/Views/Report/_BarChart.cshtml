@model TransActivitySearchModel

@{
    const string prefix = "transaction-activity-bar";
}

<div class="portlet" id="@(prefix)-box">
    <div class="portlet-title">
        <div class="caption">
            <i class="fa fa-bar-chart-o"></i>
            <span class="caption-subject uppercase"> Overall transaction percentage viewed as bar chart</span>
        </div>
        <div class="actions">
            <div class="btn-group" data-toggle="buttons">
                <label class="btn red-salsa active">
                    <input type="radio" name="options" data-chart-role="toggle-chart" data-chart-period="week">Week
                </label>
                <label class="btn red-salsa">
                    <input type="radio" name="options" data-chart-role="toggle-chart" data-chart-period="month">Month
                </label>
                <label class="btn red-salsa">
                    <input type="radio" name="options" id="year" data-chart-role="toggle-chart" data-chart-period="year">Year
                </label>
            </div>
            <a href="javascript:void(0);" class="btn btn-circle">
                <i class="fa fa-refresh"></i>
            </a>
        </div>
    </div>
    <div class="portlet-body">
        <div id="@(prefix)-box" style="height: auto;">
            <canvas id="@(prefix)-chart" height="100"></canvas>
        </div>
    </div>
</div>

<script>
    $(document).ready(function() {
        var currentPeriod;

        var chartData = {
            labels: [],
            datasets: []
        }

        var config = {
            type: 'bar',
            data: chartData,
            options: {
                responsive: true,
                legend: {
                    position: 'left'
                },
                tooltips: {
                    mode: 'index',
                    intersect: false
                },
                scales: {
                    xAxes: [
                        {
                            stacked: true,
                            display: true,
                            ticks: {
                                userCallback: function(dataLabel, index) {
                                    if (window.myBar && window.myBar.config.data.labels.length > 12) {
                                        return index % 5 === 0 ? dataLabel : '';
                                    }
                                    return dataLabel;
                                }
                            }
                        }
                    ],
                    yAxes: [
                        {
                            stacked: true,
                            display: true,
                            ticks: {
                                userCallback: function(dataLabel, index) {
                                    return (dataLabel ^ 0) === dataLabel ? dataLabel : '';
                                },
                                min: 0
                            }
                        }
                    ]
                }
            }
        }

        function changePeriod(period) {
            var labels = [];
            var datasets = [];

            var postData = {
                CreatedOnFrom: $('#@Html.IdFor(model => model.CreatedOnFrom)').val(),
                CreatedOnTo: $('#@Html.IdFor(model => model.CreatedOnTo)').val(),
                BranchId: $('#BranchId').val(),
                period: period
            };
            addAntiForgeryToken(postData);

            $.ajax({
                cache: false,
                type: "POST",
                url: '@Url.Action("RenderTransActivityBarChart", "Report")',
                data: postData,
                success: function(data) {
                    for (var i = 0; i < data.length; i++) {
                        var dsdata = [];
                        data[i].datasets.forEach(function(ds) {
                            if (i === 0)
                                labels.push(ds.label);

                            dsdata.push(ds.data);
                        });

                        datasets.push({
                            label: data[i].stacked,
                            data: dsdata,
                            backgroundColor: random_rgba()
                        });
                    }

                    if (!window.myBar) {
                        chartData.labels = labels;
                        chartData.datasets = datasets;
                        window.myBar = new Chart(document.getElementById("@prefix-chart").getContext("2d"), config);
                    } else {
                        window.myBar.config.data.labels = labels;
                        window.myBar.config.data.datasets = datasets;
                        window.myBar.update();
                    }
                },
                error: function(xhr, ajaxOptions, thrownError) {
                    $("#barChartErrorAlert").click();
                }
            });
        }

        $('button#search-transactivity,  a.btn.btn-circle').on('click',
            function() {
                changePeriod(currentPeriod);
            });

        $('#@(prefix)-box .btn-group :input[data-chart-role="toggle-chart"]').change(function() {
            var period = $(this).attr('data-chart-period');
            currentPeriod = period;
            changePeriod(period);
        });

        if (!currentPeriod)
            $('#@(prefix)-box input[data-chart-role="toggle-chart"][data-chart-period="week"]').trigger('click');
    });
</script>